import pyfiglet
import argparse
import json
import os
from src.recopilacion import consultas
from src.riesgos import evaluacion
from src.evaluacion import mejoras


class ApiKeysManager:
    def __init__(self, file_path):
        self.file_path = file_path
        self.api_keys = {}

    def load_keys(self):
        try:
            with open(self.file_path) as file:
                self.api_keys = json.load(file)
        except FileNotFoundError:
            print(
                f"The file {self.file_path} does not exist. Make sure to create it and add the API keys."
            )

    def get_key(self, api_name):
        return self.api_keys.get(api_name)

    def add_key(self, api_name, api_key):
        self.api_keys[api_name] = api_key

    def save_keys(self):
        with open(self.file_path, "w") as file:
            json.dump(self.api_keys, file, indent=4)


def analyze_username_information(username: str):
    # Path to the JSON files generated by Sherlock and Maigret
    sherlock_json_file = f"output/{username}.json"
    maigret_json_file = f"output/report_{username}_simple.json"

    # Check if the files exist
    if not (os.path.exists(sherlock_json_file) and os.path.exists(maigret_json_file)):
        print("The JSON files do not exist.")
        return

    print("Reading the Sherlock JSON file...")
    # Read the JSON file generated by Sherlock
    with open(sherlock_json_file, "r") as file:
        sherlock_data = json.load(file)

    print("Reading the Maigret JSON file...")
    # Read the JSON file generated by Maigret
    with open(maigret_json_file, "r") as file:
        maigret_data = json.load(file)

    # Create a list to store the Maigret services that are not in Sherlock
    missing_services = []

    print("Checking for missing services...")
    # Check if the Sherlock URLs are in Maigret
    for sherlock_url in sherlock_data:
        url_found = False

        # Search for the Sherlock URL in Maigret
        for service, data in maigret_data.items():
            if "url_user" in data and data["url_user"] == sherlock_url:
                url_found = True
                break

        # If the Sherlock URL is not in Maigret, add it to the list of missing services
        if not url_found:
            missing_services.append(sherlock_url)

    # Add the missing services to maigret_data
    for missing_service in missing_services:
        maigret_data[missing_service] = {
            "url_user": missing_service,
            # You can add more fields according to the structure of Maigret's data
        }

    # Save the updated data to a new JSON file
    analyzed_output_file = f"output/analyzed_{username}.json"
    with open(analyzed_output_file, "w") as file:
        json.dump(maigret_data, file, indent=4)

    print(
        "Analysis complete. The missing services have been added to /output/analyzed_"
        + username
    )


def print_banner():
    ascii_banner = pyfiglet.figlet_format("InfoHunter")

    print(ascii_banner)
    print("Welcome to InfoHunter - OSINT Tool")


def collect_email_information(
    email: str,
    pyhunter_api_key: str,
    breachdirectory_api_key: str,
    similar_web_api_key: str,
):
    # Perform a query
    consultas.realizar_consulta_email(
        email, pyhunter_api_key, breachdirectory_api_key, similar_web_api_key
    )

    # Call the function to delete non-PDF files in the "output/" folder
    delete_non_pdf_files("output")


def collect_domain_information(
    domain: str, pyhunter_api_key: str, similar_web_api_key: str
):
    # Perform a query
    consultas.realizar_consulta_dominio(domain, pyhunter_api_key, similar_web_api_key)

    # Call the function to delete non-PDF files in the "output/" folder
    delete_non_pdf_files("output")


def collect_social_media_information(username: str):
    # Perform a query
    consultas.realizar_consulta_redes_sociales(username)

    # Process the results
    # processed_data = process_results(results)

    # Get additional social media information
    # social_information = get_social_media_information('username')

    # Call the function to delete non-PDF files in the "output/" folder
    # delete_non_pdf_files("output")


def identify_social_media_risks(username: str):
    important_data = evaluacion.identificar_riesgos_username(username)
    mejoras.generar_report_username(important_data)

    # Call the function to delete non-PDF files in the "output/" folder
    delete_non_pdf_files("output")


def delete_non_pdf_files(directory):
    # Get the list of files in the directory
    files = os.listdir(directory)

    # Iterate over the files and delete those that are not PDFs
    for file in files:
        if not file.lower().endswith(".pdf"):
            file_path = os.path.join(directory, file)
            os.remove(file_path)
            # print(f"Deleted file: {file_path}")


def main():
    # Create the argument parser
    parser = argparse.ArgumentParser(description="OSINT Tool")

    parser.add_argument("-u", "--username", type=str, help="Username")
    parser.add_argument("-m", "--email", type=str, help="Email to search")
    parser.add_argument("-d", "--domain", type=str, help="Domain to search")

    # Get the arguments passed from the command line
    args = parser.parse_args()

    # Access the argument values
    username = args.username
    email = args.email
    domain = args.domain

    # Use the ApiKeysManager class
    keys_manager = ApiKeysManager("api_keys.json")
    keys_manager.load_keys()

    # Display the banner
    print_banner()

    if username:
        print("1. Collecting information")
        collect_social_media_information(username)

        print("2. Analyzing the collected information")
        analyze_username_information(username)

        print("3. Identifying security or privacy risks")
        similar_web_api_key = keys_manager.get_key("similar-web")
        identify_social_media_risks(username)
    if email:
        print("1. Collecting information")
        pyhunter_api_key = keys_manager.get_key("pyhunter")
        breachdirectory_api_key = keys_manager.get_key("breachdirectory")
        similar_web_api_key = keys_manager.get_key("similar-web")
        if (
            pyhunter_api_key and breachdirectory_api_key and similar_web_api_key
        ):  # Use the API key
            collect_email_information(
                email, pyhunter_api_key, breachdirectory_api_key, similar_web_api_key
            )
        else:
            print(
                "The PyHunter, BreachDirectory, or Similar-Web API key is not found in the API keys file."
            )
    if domain:
        print("1. Collecting information")
        pyhunter_api_key = keys_manager.get_key("pyhunter")
        similar_web_api_key = keys_manager.get_key("similar-web")
        if pyhunter_api_key:  # Use the API key
            collect_domain_information(domain, pyhunter_api_key, similar_web_api_key)
        else:
            print(
                "The PyHunter API key is not found in the API keys file."
            )

    # 3. Identifying security or privacy risks
    # identify_risks()

    # 4. Establishing measures to protect privacy and security
    # establish_measures()

    # 5. Evaluating the effectiveness of the implemented measures
    # evaluate_effectiveness()

    print("OSINT process completed!")


if __name__ == "__main__":
    main()
